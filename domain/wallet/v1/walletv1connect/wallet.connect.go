// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: wallet/v1/wallet.proto

package walletv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/orbyc/core/domain/wallet/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// WalletServiceName is the fully-qualified name of the WalletService service.
	WalletServiceName = "orbyc.wallet.v1.WalletService"
)

// WalletServiceClient is a client for the orbyc.wallet.v1.WalletService service.
type WalletServiceClient interface {
	GetAddress(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetAddressResponse], error)
	CreateSignature(context.Context, *connect_go.Request[v1.CreateSignatureRequest]) (*connect_go.Response[v1.CreateSignatureResponse], error)
	CreateTransaction(context.Context, *connect_go.Request[v1.CreateTransactionRequest]) (*connect_go.Response[v1.CreateTransactionResponse], error)
}

// NewWalletServiceClient constructs a client for the orbyc.wallet.v1.WalletService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWalletServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) WalletServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &walletServiceClient{
		getAddress: connect_go.NewClient[emptypb.Empty, v1.GetAddressResponse](
			httpClient,
			baseURL+"/orbyc.wallet.v1.WalletService/GetAddress",
			opts...,
		),
		createSignature: connect_go.NewClient[v1.CreateSignatureRequest, v1.CreateSignatureResponse](
			httpClient,
			baseURL+"/orbyc.wallet.v1.WalletService/CreateSignature",
			opts...,
		),
		createTransaction: connect_go.NewClient[v1.CreateTransactionRequest, v1.CreateTransactionResponse](
			httpClient,
			baseURL+"/orbyc.wallet.v1.WalletService/CreateTransaction",
			opts...,
		),
	}
}

// walletServiceClient implements WalletServiceClient.
type walletServiceClient struct {
	getAddress        *connect_go.Client[emptypb.Empty, v1.GetAddressResponse]
	createSignature   *connect_go.Client[v1.CreateSignatureRequest, v1.CreateSignatureResponse]
	createTransaction *connect_go.Client[v1.CreateTransactionRequest, v1.CreateTransactionResponse]
}

// GetAddress calls orbyc.wallet.v1.WalletService.GetAddress.
func (c *walletServiceClient) GetAddress(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetAddressResponse], error) {
	return c.getAddress.CallUnary(ctx, req)
}

// CreateSignature calls orbyc.wallet.v1.WalletService.CreateSignature.
func (c *walletServiceClient) CreateSignature(ctx context.Context, req *connect_go.Request[v1.CreateSignatureRequest]) (*connect_go.Response[v1.CreateSignatureResponse], error) {
	return c.createSignature.CallUnary(ctx, req)
}

// CreateTransaction calls orbyc.wallet.v1.WalletService.CreateTransaction.
func (c *walletServiceClient) CreateTransaction(ctx context.Context, req *connect_go.Request[v1.CreateTransactionRequest]) (*connect_go.Response[v1.CreateTransactionResponse], error) {
	return c.createTransaction.CallUnary(ctx, req)
}

// WalletServiceHandler is an implementation of the orbyc.wallet.v1.WalletService service.
type WalletServiceHandler interface {
	GetAddress(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetAddressResponse], error)
	CreateSignature(context.Context, *connect_go.Request[v1.CreateSignatureRequest]) (*connect_go.Response[v1.CreateSignatureResponse], error)
	CreateTransaction(context.Context, *connect_go.Request[v1.CreateTransactionRequest]) (*connect_go.Response[v1.CreateTransactionResponse], error)
}

// NewWalletServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWalletServiceHandler(svc WalletServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/orbyc.wallet.v1.WalletService/GetAddress", connect_go.NewUnaryHandler(
		"/orbyc.wallet.v1.WalletService/GetAddress",
		svc.GetAddress,
		opts...,
	))
	mux.Handle("/orbyc.wallet.v1.WalletService/CreateSignature", connect_go.NewUnaryHandler(
		"/orbyc.wallet.v1.WalletService/CreateSignature",
		svc.CreateSignature,
		opts...,
	))
	mux.Handle("/orbyc.wallet.v1.WalletService/CreateTransaction", connect_go.NewUnaryHandler(
		"/orbyc.wallet.v1.WalletService/CreateTransaction",
		svc.CreateTransaction,
		opts...,
	))
	return "/orbyc.wallet.v1.WalletService/", mux
}

// UnimplementedWalletServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWalletServiceHandler struct{}

func (UnimplementedWalletServiceHandler) GetAddress(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GetAddressResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("orbyc.wallet.v1.WalletService.GetAddress is not implemented"))
}

func (UnimplementedWalletServiceHandler) CreateSignature(context.Context, *connect_go.Request[v1.CreateSignatureRequest]) (*connect_go.Response[v1.CreateSignatureResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("orbyc.wallet.v1.WalletService.CreateSignature is not implemented"))
}

func (UnimplementedWalletServiceHandler) CreateTransaction(context.Context, *connect_go.Request[v1.CreateTransactionRequest]) (*connect_go.Response[v1.CreateTransactionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("orbyc.wallet.v1.WalletService.CreateTransaction is not implemented"))
}
