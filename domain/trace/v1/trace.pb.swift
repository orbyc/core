// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: trace/v1/trace.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// METADATA 
struct Trace_V1_Trace {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: Trace_V1_Trace.TypeEnum = .unspecified

  var departure: Trace_V1_Trace.Location {
    get {return _departure ?? Trace_V1_Trace.Location()}
    set {_departure = newValue}
  }
  /// Returns true if `departure` has been explicitly set.
  var hasDeparture: Bool {return self._departure != nil}
  /// Clears the value of `departure`. Subsequent reads from it will return its default value.
  mutating func clearDeparture() {self._departure = nil}

  var destination: Trace_V1_Trace.Location {
    get {return _destination ?? Trace_V1_Trace.Location()}
    set {_destination = newValue}
  }
  /// Returns true if `destination` has been explicitly set.
  var hasDestination: Bool {return self._destination != nil}
  /// Clears the value of `destination`. Subsequent reads from it will return its default value.
  mutating func clearDestination() {self._destination = nil}

  var description_p: String {
    get {return _description_p ?? String()}
    set {_description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  var hasDescription_p: Bool {return self._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  mutating func clearDescription_p() {self._description_p = nil}

  var footprint: Trace_V1_Trace.OneOf_Footprint? = nil

  /// carbon emissions
  var co2E: UInt64 {
    get {
      if case .co2E(let v)? = footprint {return v}
      return 0
    }
    set {footprint = .co2E(newValue)}
  }

  /// carbon offset
  var co2O: UInt64 {
    get {
      if case .co2O(let v)? = footprint {return v}
      return 0
    }
    set {footprint = .co2O(newValue)}
  }

  var startedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startedAt = newValue}
  }
  /// Returns true if `startedAt` has been explicitly set.
  var hasStartedAt: Bool {return self._startedAt != nil}
  /// Clears the value of `startedAt`. Subsequent reads from it will return its default value.
  mutating func clearStartedAt() {self._startedAt = nil}

  var duration: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _duration ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  var hasDuration: Bool {return self._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  mutating func clearDuration() {self._duration = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Footprint: Equatable {
    /// carbon emissions
    case co2E(UInt64)
    /// carbon offset
    case co2O(UInt64)

  #if !swift(>=4.1)
    static func ==(lhs: Trace_V1_Trace.OneOf_Footprint, rhs: Trace_V1_Trace.OneOf_Footprint) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.co2E, .co2E): return {
        guard case .co2E(let l) = lhs, case .co2E(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.co2O, .co2O): return {
        guard case .co2O(let l) = lhs, case .co2O(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  enum TypeEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unspecified // = 0
    case air // = 1
    case sea // = 2
    case land // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .unspecified
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .air
      case 2: self = .sea
      case 3: self = .land
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .air: return 1
      case .sea: return 2
      case .land: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  struct Location {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var place: String = String()

    var lat: String {
      get {return _lat ?? String()}
      set {_lat = newValue}
    }
    /// Returns true if `lat` has been explicitly set.
    var hasLat: Bool {return self._lat != nil}
    /// Clears the value of `lat`. Subsequent reads from it will return its default value.
    mutating func clearLat() {self._lat = nil}

    var lng: String {
      get {return _lng ?? String()}
      set {_lng = newValue}
    }
    /// Returns true if `lng` has been explicitly set.
    var hasLng: Bool {return self._lng != nil}
    /// Clears the value of `lng`. Subsequent reads from it will return its default value.
    mutating func clearLng() {self._lng = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _lat: String? = nil
    fileprivate var _lng: String? = nil
  }

  init() {}

  fileprivate var _departure: Trace_V1_Trace.Location? = nil
  fileprivate var _destination: Trace_V1_Trace.Location? = nil
  fileprivate var _description_p: String? = nil
  fileprivate var _startedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _duration: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

#if swift(>=4.2)

extension Trace_V1_Trace.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Trace_V1_Trace.TypeEnum] = [
    .unspecified,
    .air,
    .sea,
    .land,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension Trace_V1_Trace: @unchecked Sendable {}
extension Trace_V1_Trace.OneOf_Footprint: @unchecked Sendable {}
extension Trace_V1_Trace.TypeEnum: @unchecked Sendable {}
extension Trace_V1_Trace.Location: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "trace.v1"

extension Trace_V1_Trace: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Trace"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "departure"),
    3: .same(proto: "destination"),
    4: .same(proto: "description"),
    5: .same(proto: "co2e"),
    6: .same(proto: "co2o"),
    7: .standard(proto: "started_at"),
    8: .same(proto: "duration"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._departure) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._destination) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._description_p) }()
      case 5: try {
        var v: UInt64?
        try decoder.decodeSingularUInt64Field(value: &v)
        if let v = v {
          if self.footprint != nil {try decoder.handleConflictingOneOf()}
          self.footprint = .co2E(v)
        }
      }()
      case 6: try {
        var v: UInt64?
        try decoder.decodeSingularUInt64Field(value: &v)
        if let v = v {
          if self.footprint != nil {try decoder.handleConflictingOneOf()}
          self.footprint = .co2O(v)
        }
      }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._startedAt) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._duration) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.type != .unspecified {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    try { if let v = self._departure {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._destination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._description_p {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    switch self.footprint {
    case .co2E?: try {
      guard case .co2E(let v)? = self.footprint else { preconditionFailure() }
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 5)
    }()
    case .co2O?: try {
      guard case .co2O(let v)? = self.footprint else { preconditionFailure() }
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 6)
    }()
    case nil: break
    }
    try { if let v = self._startedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._duration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Trace_V1_Trace, rhs: Trace_V1_Trace) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs._departure != rhs._departure {return false}
    if lhs._destination != rhs._destination {return false}
    if lhs._description_p != rhs._description_p {return false}
    if lhs.footprint != rhs.footprint {return false}
    if lhs._startedAt != rhs._startedAt {return false}
    if lhs._duration != rhs._duration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Trace_V1_Trace.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TYPE_UNSPECIFIED"),
    1: .same(proto: "TYPE_AIR"),
    2: .same(proto: "TYPE_SEA"),
    3: .same(proto: "TYPE_LAND"),
  ]
}

extension Trace_V1_Trace.Location: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Trace_V1_Trace.protoMessageName + ".Location"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "place"),
    2: .same(proto: "lat"),
    3: .same(proto: "lng"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.place) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._lat) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._lng) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.place.isEmpty {
      try visitor.visitSingularStringField(value: self.place, fieldNumber: 1)
    }
    try { if let v = self._lat {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._lng {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Trace_V1_Trace.Location, rhs: Trace_V1_Trace.Location) -> Bool {
    if lhs.place != rhs.place {return false}
    if lhs._lat != rhs._lat {return false}
    if lhs._lng != rhs._lng {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
