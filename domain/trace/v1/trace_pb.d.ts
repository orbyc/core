// @generated by protoc-gen-es v1.0.0
// @generated from file trace/v1/trace.proto (package trace.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, Duration, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Timestamp } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * METADATA 
 *
 * @generated from message trace.v1.Trace
 */
export declare class Trace extends Message<Trace> {
  /**
   * @generated from field: trace.v1.Trace.Type type = 1;
   */
  type: Trace_Type;

  /**
   * @generated from field: optional trace.v1.Trace.Location departure = 2;
   */
  departure?: Trace_Location;

  /**
   * @generated from field: trace.v1.Trace.Location destination = 3;
   */
  destination?: Trace_Location;

  /**
   * @generated from field: optional string description = 4;
   */
  description?: string;

  /**
   * @generated from oneof trace.v1.Trace.footprint
   */
  footprint: {
    /**
     * carbon emissions
     *
     * @generated from field: uint64 co2e = 5;
     */
    value: bigint;
    case: "co2e";
  } | {
    /**
     * carbon offset
     *
     * @generated from field: uint64 co2o = 6;
     */
    value: bigint;
    case: "co2o";
  } | { case: undefined; value?: undefined };

  /**
   * @generated from field: google.protobuf.Timestamp started_at = 7;
   */
  startedAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Duration duration = 8;
   */
  duration?: Duration;

  constructor(data?: PartialMessage<Trace>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "trace.v1.Trace";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Trace;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Trace;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Trace;

  static equals(a: Trace | PlainMessage<Trace> | undefined, b: Trace | PlainMessage<Trace> | undefined): boolean;
}

/**
 * @generated from enum trace.v1.Trace.Type
 */
export declare enum Trace_Type {
  /**
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: TYPE_AIR = 1;
   */
  AIR = 1,

  /**
   * @generated from enum value: TYPE_SEA = 2;
   */
  SEA = 2,

  /**
   * @generated from enum value: TYPE_LAND = 3;
   */
  LAND = 3,
}

/**
 * @generated from message trace.v1.Trace.Location
 */
export declare class Trace_Location extends Message<Trace_Location> {
  /**
   * @generated from field: string place = 1;
   */
  place: string;

  /**
   * @generated from field: optional string lat = 2;
   */
  lat?: string;

  /**
   * @generated from field: optional string lng = 3;
   */
  lng?: string;

  constructor(data?: PartialMessage<Trace_Location>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "trace.v1.Trace.Location";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Trace_Location;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Trace_Location;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Trace_Location;

  static equals(a: Trace_Location | PlainMessage<Trace_Location> | undefined, b: Trace_Location | PlainMessage<Trace_Location> | undefined): boolean;
}

